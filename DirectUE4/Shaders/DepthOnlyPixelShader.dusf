
#include "Common.dusf"
#include "/Generated/Material.dusf"
#include "/Generated/VertexFactory.dusf"


#if OUTPUT_PIXEL_DEPTH_OFFSET
bool bApplyDepthOffset;
#endif

void Main(
#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants,
	float4 PixelPosition : TEXCOORD6,
	in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position
	OPTIONAL_IsFrontFace
	OPTIONAL_OutDepthConservative,
#endif
	out float4 OutColor : SV_Target0
#if MATERIALBLENDING_MASKED_USING_COVERAGE
	, out uint OutCoverage : SV_Coverage
#endif
	)
{
#if !MATERIALBLENDING_SOLID || OUTPUT_PIXEL_DEPTH_OFFSET
        ResolvedView = ResolveView();

	MaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);
	PixelMaterialInputs =Inputs;
	CalcMaterialParameters(MaterialParameters, Inputs, SvPosition, bIsFrontFace);

	#if OUTPUT_PIXEL_DEPTH_OFFSET
	ApplyPixelDepthOffsetToMaterialParameters(MaterialParameters, Inputs, OutDepth);
	OutDepth = bApplyDepthOffset ? OutDepth : SvPosition.z;
	#endif

	#if MATERIALBLENDING_TRANSLUCENT
		clip(GetMaterialOpacity(Inputs) - GetMaterialOpacityMaskClipValue());
	#elif MATERIALBLENDING_MASKED_USING_COVERAGE
		OutCoverage = DiscardMaterialWithPixelCoverage(MaterialParameters, Inputs);
	#else
		GetMaterialCoverageAndClipping(MaterialParameters, Inputs);
	#endif
#endif

    OutColor = 0;
}