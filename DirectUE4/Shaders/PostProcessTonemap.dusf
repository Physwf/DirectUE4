#include "Common.dusf"
#include "PostProcessCommon.dusf"
#include "TonemapCommon.dusf"
#include "EyeAdaptationCommon.dusf"

/** Values of DIM_OUTPUT_DEVICE (matching C++'s FTonemapperOutputDevice) */
#define TONEMAPPER_OUTOUT_sRGB 0
#define TONEMAPPER_OUTOUT_Rec709 1
#define TONEMAPPER_OUTOUT_ExplicitGammaMapping 2
#define TONEMAPPER_OUTOUT_ACES1000nitST2084 3
#define TONEMAPPER_OUTOUT_ACES2000nitST2084 4
#define TONEMAPPER_OUTOUT_ACES1000nitScRGB 5
#define TONEMAPPER_OUTOUT_ACES2000nitScRGB 6
#define TONEMAPPER_OUTOUT_LinearEXR 7


#ifndef DIM_OUTPUT_DEVICE
#define DIM_OUTPUT_DEVICE (TONEMAPPER_OUTOUT_sRGB)
#endif

// 0 / 1(slower, visualize multiple internals side by side for the same image portion, see DebugTile)
#define DEBUG_TONEMAPPER 0

// 64x64 tiling noise texture, optimized to have mostly high frequency content
Texture2D NoiseTexture;
SamplerState NoiseTextureSampler;

// xyz:SceneColorTint.rgb, w:unused
float4 ColorScale0;
// xyz:Bloom1Tint.rgb, w:unused
float4 ColorScale1;

// from the postprocess settings, x:VignetteIntensity, y:SharpenDiv6
float2 TonemapperParams;

// Fine film grain
float3 GrainRandomFull;
float3 GrainScaleBiasJitter;

float4 SceneUVMinMax;
float4 SceneBloomUVMinMax;

float4 ScreenPosToScenePixel;

#if EYEADAPTATION_EXPOSURE_FIX != 1
// Default value used when eye adaptation is disabled (e.g fixed exposure) or not available.
float DefaultEyeExposure;
#endif

half GrainFromUV(float2 GrainUV)
{
	half Grain = frac(sin(GrainUV.x + GrainUV.y * 543.31) *  493013.0);
	return Grain;
}

// LUT for color grading
#if USE_VOLUME_LUT == 1
Texture3D		ColorGradingLUT;
#else
Texture2D       ColorGradingLUT;
#endif 
SamplerState        ColorGradingLUTSampler;

static const float LUTSize = 32;

half3 ColorLookupTable(half3 LinearColor)
{
	float3 LUTEncodedColor;
	// Encode as ST-2084 (Dolby PQ) values
#if (DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_ACES1000nitST2084 || DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_ACES2000nitST2084 || DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_ACES1000nitScRGB || DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_ACES2000nitScRGB || DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_LinearEXR)
	LUTEncodedColor = LinearToST2084(LinearColor);

#else
	LUTEncodedColor = LinToLog(LinearColor + LogToLin(0));

#endif

	float3 UVW = LUTEncodedColor * ((LUTSize - 1) / LUTSize) + (0.5f / LUTSize);

#if USE_VOLUME_LUT == 1
	half3 OutDeviceColor = Texture3DSample(ColorGradingLUT, ColorGradingLUTSampler, UVW).rgb;
#else
	half3 OutDeviceColor = UnwrappedTexture3DSample(ColorGradingLUT, ColorGradingLUTSampler, UVW, LUTSize).rgb;
#endif

	return OutDeviceColor * 1.05;
}

// xy should be a integer position (e.g. pixel position on the screen)
// use the PseudoRandom() function if you have ALU performance left
// and this if you have TEX performance left.
float PseudoRandomTex(float2 xy)
{
	return Texture2DSample(NoiseTexture, NoiseTextureSampler, xy / 64.0f).r;
}

float SwitchVerticalAxis;

#define NEEDTOSWITCHVERTICLEAXIS (ES2_PROFILE && COMPILER_GLSL_ES2) || (ES3_1_PROFILE && COMPILER_GLSL_ES3_1)

// can be optimized
float2 ScreenPosToUV(float2 ScreenPos)
{
	float2 UV = (ScreenPos * ScreenPosToScenePixel.xy + ScreenPosToScenePixel.zw) * PostprocessInput0Size.zw;

#if NEEDTOSWITCHVERTICLEAXIS
	UV.y = 1.0 - UV.y;
#endif

	return UV;
}

float2 UVToScreenPos(float2 UV)
{
#if NEEDTOSWITCHVERTICLEAXIS
	UV.y = 1.0 - UV.y;
#endif

	return (UV * PostprocessInput0Size.xy - ScreenPosToScenePixel.zw) / ScreenPosToScenePixel.xy;
}

float4 ChromaticAberrationParams;

void TonemapCommonVS(
	in	float4 Position,
	in	float2 TexCoord,
	out	float3 OutExposureScaleVignette,
	out	float4 OutGrainUV,
	out	float2 OutScreenPos,
	out	float2 OutFullViewUV
)
{
	// Forward renderer uses view size texture
	// TODO: Looks to be Ronin specific.. check this:
	OutFullViewUV.xy = Position.xy * float2(0.5, -0.5) + 0.5;

#if NEEDTOSWITCHVERTICLEAXIS
	OutFullViewUV.y = 1.0 - OutFullViewUV.y;
#endif

#if EYEADAPTATION_EXPOSURE_FIX == 1
	// texture can be GWhiteTexture which is 1x1. It's important we don't read outside bounds.
	OutExposureScaleVignette.x = EyeAdaptation.Load(int3(0, 0, 0)).x;
#else
	// If eye adaptation is disabled (e.g. fixed exposure level ) or  not available.  
	OutExposureScaleVignette.x = DefaultEyeExposure;
#endif

	// Scale vignette to always be a circle with consistent corner intensity.
	OutExposureScaleVignette.yz = VignetteSpace(Position.xy);

	// Grain
	OutGrainUV.xy = TexCoord + PostprocessInput0Size.zw * float2(-0.5, 0.5);
	OutGrainUV.zw = TexCoord + GrainRandomFull.xy;

	// Fringe
	OutScreenPos = UVToScreenPos(TexCoord);
}

// vertex shader entry point
void MainVS(
	in 					float4 InPosition : ATTRIBUTE0,
	in 					float2 InTexCoord : ATTRIBUTE1,
	out noperspective 	float2 OutTexCoord : TEXCOORD0,
	out noperspective 	float3 OutExposureScaleVignette : TEXCOORD1,
	out noperspective 	float4 OutGrainUV : TEXCOORD2,
	out noperspective 	float2 OutScreenPos : TEXCOORD3,
	out noperspective 	float2 OutFullViewUV : TEXCOORD4,
	out 				float4 OutPosition : SV_POSITION
)
{
#if NEEDTOSWITCHVERTICLEAXIS
	// This is currently the last pass, so flip the texture on V to match D3D
	InTexCoord.y = 1.0 - InTexCoord.y;
#endif

	DrawRectangle(InPosition, InTexCoord, OutPosition, OutTexCoord);
	TonemapCommonVS(OutPosition, OutTexCoord, OutExposureScaleVignette, OutGrainUV, OutScreenPos, OutFullViewUV);
}

// Function graphing
float F0(float x)
{
	return x * saturate((x - 0.5) / 2);
}

float F1(float x)
{
	return x;
}

float F2(float x)
{
	return x;
}

float F3(float x)
{
	return x;
}

float LineShade(float fx, float y, float dydx, float LineWidth)
{
	return 1 - smoothstep(0.5 * LineWidth, LineWidth, abs(fx - y) / sqrt(1 + Square(dydx)));
}

float3 Graph(float2 ScreenSpacePos)
{
	float2 WindowMin = float2(0, 0);
	float2 WindowMax = float2(1, 1);

	float2 p = ((ScreenSpacePos + 1) * 0.5 - WindowMin) * (WindowMax - WindowMin);
	float LineWidth = dot(WindowMax - WindowMin, 0.0005);

	float3 Color;
	Color = float3(1, 0, 0) * LineShade(F0(p.x), p.y, (F0(p.x + LineWidth) - F0(p.x - LineWidth)) / (2 * LineWidth), LineWidth);
	Color += float3(0, 1, 0) * LineShade(F1(p.x), p.y, (F1(p.x + LineWidth) - F1(p.x - LineWidth)) / (2 * LineWidth), LineWidth);
	Color += float3(0, 0, 1) * LineShade(F2(p.x), p.y, (F2(p.x + LineWidth) - F2(p.x - LineWidth)) / (2 * LineWidth), LineWidth);
	Color += float3(1, 1, 0) * LineShade(F3(p.x), p.y, (F3(p.x + LineWidth) - F3(p.x - LineWidth)) / (2 * LineWidth), LineWidth);
	//Color += float3( 0, 1, 1 ) * LineShade( F4(p.x), p.y, ( F4(p.x + LineWidth) - F4(p.x - LineWidth) ) / (2 * LineWidth), LineWidth );
	//Color += float3( 1, 1, 1 ) * LineShade( F5(p.x), p.y, ( F5(p.x + LineWidth) - F5(p.x - LineWidth) ) / (2 * LineWidth), LineWidth );
	return Color;
}

// @return color in SRGB
float3 SimpleToneMap(float3 HDRColor)
{
	// from http://filmicgames.com/archives/75
	//	float3 x = max(0, HDRColor - 0.004f);	return (x * (6.2f * x + 0.5f)) / (x * (6.2f * x + 1.7f) + 0.06f);

	// linear/no tonemapper 
	return HDRColor;
}

float max3(float3 In)
{
	return max(In.x, max(In.y, In.z));
}

// @return 0 at low, 1 at high and linear interpolated inbetween
float RemapScalar(float Low, float High, float x)
{
	return (x - Low) / (High - Low);
}

float max4(float4 x)
{
	return max(max(x.r, x.g), max(x.b, x.a));
}

// useful debug helper (not optimized), could be moved into a more common place
// @param DebugTile 0,0 is center, -1,0 is left, 1,0 is right, ...
float2 ComputeCounterStepForTileDebugging(float4 SvPosition, int2 TileSize, out int2 DebugTile, out int2 LocalDebugTilePosition)
{
	// ViewportRect is defined for postprocessing passes
	float2 CenterPos = (ViewportRect.xy + ViewportRect.zw) / 2.0f;
	float2 LeftTopPos = CenterPos - TileSize / 2;

	float2 LocalPos = SvPosition.xy - LeftTopPos;

	DebugTile = floor(LocalPos / TileSize);

	LocalDebugTilePosition = LocalPos - DebugTile * TileSize;

	float2 CounterStep = -DebugTile * TileSize;

	return CounterStep;
}
// useful debug helper (works with ComputeCounterStepForTileDebugging()), could be moved into a more common place
#define OffsetInterpolator(CounterStep, InterpolatorName) \
		InterpolatorName += ddx(InterpolatorName) * CounterStep.x + ddy(InterpolatorName) * CounterStep.y;

half3 LookupSceneColor(float2 SceneUV, int2 PixelOffset)
{
#if (ES2_PROFILE && COMPILER_GLSL_ES2) || (ES3_1_PROFILE && COMPILER_GLSL_ES3_1)
	// slower but always works
	// to prevent "error: Texture offset not supported on GLSL ES"
	return Texture2DSample(PostprocessInput0, PostprocessInput0Sampler, SceneUV + PixelOffset * PostprocessInput0Size.zw).rgb;
#else
	// faster
	return PostprocessInput0.SampleLevel(PostprocessInput0Sampler, SceneUV, 0, PixelOffset).rgb;
#endif
}

float4 SampleSceneColor(float2 SceneUV)
{
#if USE_GRAIN_JITTER
	SceneUV = clamp(SceneUV, SceneUVMinMax.xy, SceneUVMinMax.zw);
#endif

	return Texture2DSample(PostprocessInput0, PostprocessInput0Sampler, SceneUV);
}

float4 TonemapCommonPS(
	float2 UV,
	float3 ExposureScaleVignette,
	float4 GrainUV,
	float2 ScreenPos, // [-1, 1]x[-1, 1]
	float2 FullViewUV,
	float4 SvPosition
)
{
	float4 OutColor = 0;

#if USE_PREEXPOSURE
	const float OneOverPreExposure = View.OneOverPreExposure;
#else
	const float OneOverPreExposure = 1.f;
#endif

#if DEBUG_TONEMAPPER
	// @param DebugTile 0,0 is center, -1,0 is left, 1,0 is right, ...
	int2 DebugTile;
	int2 LocalDebugTilePosition;
	bool bOutputDebugTile = false;
	{
		// split the screen in a 3x3 layout and add some border (0.3)
		int2 TileSize = floor(ViewportSize.xy / float2(3.3f, 3.3f));
		bool bBorder;

		float2 CounterStep = ComputeCounterStepForTileDebugging(SvPosition, TileSize, DebugTile, LocalDebugTilePosition);

		OffsetInterpolator(CounterStep, UV);
		OffsetInterpolator(CounterStep, GrainUV);
		OffsetInterpolator(CounterStep, ScreenPos);
		OffsetInterpolator(CounterStep, FullViewUV);
	}
	if (all(DebugTile == int2(0, 0)))
	{
		// center is unaltered tonemapper output
		bOutputDebugTile = true;
	}
#endif

#if USE_GRAIN_JITTER || USE_GRAIN_INTENSITY || USE_GRAIN_QUANTIZATION
	half Grain = GrainFromUV(GrainUV.zw);
#endif
	float2 SceneUV = UV.xy;
#if USE_GRAIN_JITTER
	SceneUV = lerp(UV.xy, GrainUV.xy, (1.0 - Grain * Grain) * GrainScaleBiasJitter.z);
#endif

#if USE_COLOR_FRINGE
	float2 SceneUVJitter = float2(0.0, 0.0);
#if USE_GRAIN_JITTER
	SceneUVJitter = SceneUV.xy - UV.xy;
#endif

	float2 CAScale = ChromaticAberrationParams.rg;
	float StartOffset = ChromaticAberrationParams.z;

	float4 CAUV;
	CAUV = ScreenPos.xyxy - sign(ScreenPos).xyxy * saturate(abs(ScreenPos) - StartOffset).xyxy * CAScale.rrgg;
	CAUV.xy = ScreenPosToUV(CAUV.xy);
	CAUV.zw = ScreenPosToUV(CAUV.zw);

	half4 SceneColor = SampleSceneColor(CAUV.xy + SceneUVJitter.xy);
	half SceneColorG = SampleSceneColor(CAUV.zw + SceneUVJitter.xy).g;
	half SceneColorB = SampleSceneColor(SceneUV).b;
	SceneColor.g = SceneColorG;
	SceneColor.b = SceneColorB;
#else
	half4 SceneColor = SampleSceneColor(SceneUV);
#endif

	SceneColor.rgb *= OneOverPreExposure;

	float ExposureScale = ExposureScaleVignette.x;

#if DEBUG_TONEMAPPER
	if (all(DebugTile == int2(-1, 1)))
	{
		// left below to the center is: no ExposureScale
		ExposureScale = 1.0f;
		bOutputDebugTile = true;
	}
#endif

	// 0..x, 0:no effect .. 1:strong, from r.Tonemapper.Sharpen
	// Div6 is to save one instruction
	float SharpenMultiplierDiv6 = TonemapperParams.y;

#if DEBUG_TONEMAPPER
	if (all(DebugTile == int2(0, -1)) || all(DebugTile == int2(-1, -1)))
	{
		// top row: no sharpen
		SharpenMultiplierDiv6 = 0;
		bOutputDebugTile = true;
	}
#endif //DEBUG_TONEMAPPER

#if USE_SHARPEN
	{
		half3 C1 = LookupSceneColor(SceneUV, int2(-1, 0)) * OneOverPreExposure;
		half3 C2 = LookupSceneColor(SceneUV, int2(1, 0)) * OneOverPreExposure;
		half3 C3 = LookupSceneColor(SceneUV, int2(-1, -1)) * OneOverPreExposure;
		half3 C4 = LookupSceneColor(SceneUV, int2(-1, 1)) * OneOverPreExposure;

		// reference solution
		//		half A0 = max3(SceneColor);
		//		half4 LuminanceNeightbors = half4(max3(C1), max3(C2), max3(C3), max3(C4));
		// 5 instructiopns less than reference
		half A0 = Luminance(SceneColor.rgb);
		half4 LuminanceNeightbors = half4(Luminance(C1), Luminance(C2), Luminance(C3), Luminance(C4));
		// 9 instructions less than reference (green is often a good approximation for the luminance)
		//half A0 = SceneColor.g;
		//half4 LuminanceNeightbors = half4(C1.g, C2.g, C3.g, C4.g);

		// compute mask to not sharpen near very bright HDR content
		// Note: using max instead of summming up saves 1 instruction
		// Note: We could multiply this to tweak the edge weight but it might instroduce a cost
		half HDREdge = ExposureScale * max4(abs(A0 - LuminanceNeightbors));
		// 3 instructions less but less accurate (faint black dots near bright edges)
		//half HDREdge = ExposureScale * max(abs(A0 * 2 - (LuminanceNeightbors.r + LuminanceNeightbors.g)), abs(A0 * 2 - (LuminanceNeightbors.b + LuminanceNeightbors.a)));

		// 0..1
		half EdgeMask = saturate(1.0f - HDREdge);

#if DEBUG_TONEMAPPER
		if (all(DebugTile == int2(1, 0)))
		{
			// right to the center is: Sharpen EdgeMask
			OutColor = EdgeMask; return;
		}
#endif //DEBUG_TONEMAPPER

		// -1:sharpen, 0:no effect, 1:blur
		float LerpFactor = -EdgeMask * SharpenMultiplierDiv6;

		// reference
		// same instruction count as if the center weight is 1.0
		//		half3 BlurredSceneColor = ((C1 + C2 + C3 + C4) + SceneColor * 2) / 6;
		//		SceneColor = lerp(SceneColor, BlurredSceneColor, LerpFactor);
		// optimized, Div6 went into the C++ code
		half3 DeltaColor = (C1 + C2 + C3 + C4) - SceneColor.rgb * 4;
		SceneColor.rgb += DeltaColor * LerpFactor;
	}
#endif

#if USE_GAMMA_ONLY

#if FEATURE_LEVEL > FEATURE_LEVEL_ES3_1 // On mobile ExposureScale applied in base pass PS
	SceneColor.rgb *= ExposureScale;
#endif
	OutColor.rgb = pow(SceneColor.rgb, InverseGamma.x);

#else 

	half3 LinearColor = SceneColor.rgb * ColorScale0.rgb;

#if USE_BLOOM
	float2 BloomUV = clamp(UV, SceneBloomUVMinMax.xy, SceneBloomUVMinMax.zw);
#if ES2_PROFILE || ES3_1_PROFILE
	BloomUV = FullViewUV.xy;
#endif
	float4 CombinedBloom = Texture2DSample(PostprocessInput1, PostprocessInput1Sampler, BloomUV);
	float2 DirtViewportUV = (SvPosition.xy - float2(ViewportRect.xy)) * ViewportSize.zw;
	float3 BloomDirtMaskColor = Texture2DSample(BloomDirtMask.Mask, BloomDirtMask.MaskSampler, DirtViewportUV).rgb * BloomDirtMask.Tint.rgb;

#if DEBUG_TONEMAPPER
	if (all(DebugTile == int2(-1, -1)))
	{
		// left to the center is: no bloom
		CombinedBloom = 0;
		bOutputDebugTile = true;
	}
	if (all(DebugTile == int2(1, -1)))
	{
		// right to the center is: bloom only
		LinearColor = 0;
		bOutputDebugTile = true;
	}
#endif //DEBUG_TONEMAPPER

	LinearColor += CombinedBloom.rgb * (ColorScale1.rgb + BloomDirtMaskColor);
#endif

#if NO_EYEADAPTATION_EXPOSURE_FIX == 1
	ExposureScale = BloomDirtMask.Tint.w;
#endif

	LinearColor *= ExposureScale;

#if USE_VIGNETTE
	LinearColor.rgb *= ComputeVignetteMask(ExposureScaleVignette.yz, TonemapperParams.x);
#endif

#if USE_GRAIN_INTENSITY
	// Needs to go before tonemapping.
	half GrainMul = Grain * GrainScaleBiasJitter.x + GrainScaleBiasJitter.y;
	LinearColor.rgb *= GrainMul;
#endif

	half3 OutDeviceColor = ColorLookupTable(LinearColor);

	//OutDeviceColor = Graph(SvPositionToScreenPosition(SvPosition).xy);

	half LuminanceForPostProcessAA = dot(OutDeviceColor, half3(0.299f, 0.587f, 0.114f));

#if USE_GRAIN_QUANTIZATION
	// Needs to go after tonemapping.
#if USE_LINEAR_FLOAT_RT
	half GrainQuantization = 1.0 / 1024.0;
#else
	half GrainQuantization = 1.0 / 256.0;
#endif

	half GrainAdd = (Grain * GrainQuantization) + (-0.5 * GrainQuantization);
	OutDeviceColor.rgb += GrainAdd;
#endif

	// RETURN_COLOR not needed unless writing to SceneColor
	OutColor = float4(OutDeviceColor, saturate(LuminanceForPostProcessAA));

#if USE_LINEAR_FLOAT_RT
	OutColor.rgb = sRGBToLinear(OutColor.rgb);
#endif

#if DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_ACES1000nitScRGB || DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_ACES2000nitScRGB
	OutColor.xyz = ST2084ToScRGB(OutColor.xyz, DIM_OUTPUT_DEVICE);

#elif DIM_OUTPUT_DEVICE == TONEMAPPER_OUTOUT_LinearEXR
	OutColor.xyz = ST2084ToLinear(OutColor.xyz);

#endif

#endif

#if POST_PROCESS_ALPHA == 2
	OutColor.a = SceneColor.a;
#endif

#if DEBUG_TONEMAPPER
	if (!bOutputDebugTile)
	{
		// the original tonemapped color is only in the center
		// other tiles can output like this:
		//  if(all(DebugTile == int2(1, 0)))
		//    { OutColor = ..; return; }
		// or
		//  if(all(DebugTile == int2(1, 0)))
		//    { ..; bOutputDebugTile = true; }
		OutColor = 0;
	}
	if (any(LocalDebugTilePosition == int2(0, 0)))
	{
		// border grid
		OutColor = 1;
	}
#endif //DEBUG_TONEMAPPER

	return OutColor;
}

// pixel shader entry point
void MainPS(
	in noperspective float2 UV : TEXCOORD0,
	in noperspective float3 InExposureScaleVignette : TEXCOORD1,
	in noperspective float4 GrainUV : TEXCOORD2,
	in noperspective float2 ScreenPos : TEXCOORD3,
	in noperspective float2 FullViewUV : TEXCOORD4,
	float4 SvPosition : SV_POSITION,		// after all interpolators
	out float4 OutColor : SV_Target0
)
{
	OutColor = TonemapCommonPS(UV, InExposureScaleVignette, GrainUV, ScreenPos, FullViewUV, SvPosition);
}
