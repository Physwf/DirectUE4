#include "VertexFactoryCommon.dusf"
#include "GPUSkinCommon.dusf"

#ifndef GPUSKIN_MORPH_BLEND
#define GPUSKIN_MORPH_BLEND 0
#endif

float4x4 PreviousLocalToWorld;

#ifndef GPUSKIN_APEX_CLOTH
#define GPUSKIN_APEX_CLOTH 0
#endif

#ifndef GPUSKIN_LIMIT_2BONE_INFLUENCES
#define GPUSKIN_LIMIT_2BONE_INFLUENCES 0 // default is 4 bones
#endif

#ifndef GPUSKIN_USE_EXTRA_INFLUENCES
#define GPUSKIN_USE_EXTRA_INFLUENCES 0
#endif

#define FIXED_VERTEX_INDEX 0xFFFF

bool PerBoneMotionBlur;

struct FVertexFactoryInput
{
	float4	Position : ATTRIBUTE0;
	// 0..1
	half3	TangentX : ATTRIBUTE1;
	// 0..1
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ : ATTRIBUTE2;

#if FEATURE_LEVEL >= FEATURE_LEVEL_ES3_1 || COMPILER_METAL
	uint4	BlendIndices : ATTRIBUTE3;
#if GPUSKIN_USE_EXTRA_INFLUENCES
	uint4	BlendIndicesExtra : ATTRIBUTE14;
#endif
#else
	// Continue using int for SM3, compatibility of uint is unknown across SM3 platforms
	int4	BlendIndices : ATTRIBUTE3;
#if GPUSKIN_USE_EXTRA_INFLUENCES
	int4	BlendIndicesExtra : ATTRIBUTE14;
#endif
#endif
	float4	BlendWeights : ATTRIBUTE4;
#if GPUSKIN_USE_EXTRA_INFLUENCES
	float4	BlendWeightsExtra : ATTRIBUTE15;
#endif


#if NUM_MATERIAL_TEXCOORDS_VERTEX
	// If this changes make sure to update LocalVertexFactory.usf
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX] : ATTRIBUTE5;

#if NUM_MATERIAL_TEXCOORDS_VERTEX > 4
#error Too many texture coordinate sets defined on GPUSkin vertex input. Max: 4.
#endif
#endif

#if GPUSKIN_MORPH_BLEND
	// NOTE: TEXCOORD6,TEXCOORD7 used instead of POSITION1,NORMAL1 since those semantics are not supported by Cg 
	/** added to the Position */
	float3	DeltaPosition : ATTRIBUTE9;	//POSITION1;
										/** added to the TangentZ and then used to derive new TangentX,TangentY, .w contains the weight of the tangent blend */
	float3	DeltaTangentZ : ATTRIBUTE10;	//NORMAL1;
#endif

#if GPUSKIN_APEX_CLOTH
	uint ClothVertexID : SV_VertexID;
#endif

	/** Per vertex color */
	float4 Color : ATTRIBUTE13;

	/** Optional instance ID for vertex layered rendering */
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER
	uint InstanceId : SV_InstanceID;
#endif
};

struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK

		float4 Color : COLOR0;

#if NUM_TEX_COORD_INTERPOLATORS
	float2	TexCoords[NUM_TEX_COORD_INTERPOLATORS]	: TEXCOORD0;
#endif

#if INSTANCED_STEREO
	nointerpolation uint PackedEyeIndex : PACKED_EYE_INDEX;
#endif
};


/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS	
	[UNROLL]
		for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.TexCoords[CoordinateIndex];
		}
#endif

	half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif
	Result.UnMirrored = TangentToWorld2.w;
	Result.VertexColor = Interpolants.Color;
	Result.TwoSidedSign = 1;
	return Result;
}

#if NEEDS_LIGHTMAP_COORDINATE
void GetLightMapCoordinates(FVertexFactoryInterpolantsVSToPS Interpolants, out float2 LightmapUV0, out float2 LightmapUV1)
{
	LightmapUV0 = LightmapUV1 = 0;
}

half2 GetShadowMapCoordinate(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}
#endif

#define FBoneMatrix float3x4

// The bone matrix buffer stored as 4x3 (3 float4 behind each other), all chunks of a skeletal mesh in one, each skeletal mesh has it's own buffer
STRONG_TYPE Buffer<float4> BoneMatrices;
// The previous bone matrix buffer stored as 4x3 (3 float4 behind each other), all chunks of a skeletal mesh in one, each skeletal mesh has it's own buffer
STRONG_TYPE Buffer<float4> PreviousBoneMatrices;

// Cache data to avoid multiple calculation 
struct FVertexFactoryIntermediates
{
	// Blend Matrix (used for position/tangents)
	FBoneMatrix BlendMatrix;

	// Unpacked position
	float3 UnpackedPosition;

	// Tangent Basis
	float3x3 TangentToLocal;

	// Vertex Color
	float4 Color;

#if GPUSKIN_APEX_CLOTH
	// in world space (non translated)
	float3 SimulatedPosition;
	// in world space (non translated)
	float3 PreviousSimulatedPosition;
#endif

};

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = mul(TangentToLocal, GetLocalToWorld3x3());
	Result.PreSkinnedPosition = Intermediates.UnpackedPosition.xyz;
	Result.PreSkinnedNormal = Input.TangentZ.xyz;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Input.TexCoords[CoordinateIndex];
	}
#endif
	return Result;
}

/**
* Unpack position - uncompress xyz position to world position
*/
float3 UnpackedPosition(FVertexFactoryInput Input)
{
	return float3(Input.Position.xyz);
}

FBoneMatrix GetBoneMatrix(int Index)
{
	float4 A = BoneMatrices[Index * 3];
	float4 B = BoneMatrices[Index * 3 + 1];
	float4 C = BoneMatrices[Index * 3 + 2];
	return FBoneMatrix(A, B, C);

}

FBoneMatrix CalcBoneMatrix(FVertexFactoryInput Input)
{
	FBoneMatrix BoneMatrix = Input.BlendWeights.x * GetBoneMatrix(Input.BlendIndices.x);
	BoneMatrix += Input.BlendWeights.y * GetBoneMatrix(Input.BlendIndices.y);

#if !GPUSKIN_LIMIT_2BONE_INFLUENCES
	BoneMatrix += Input.BlendWeights.z * GetBoneMatrix(Input.BlendIndices.z);
	BoneMatrix += Input.BlendWeights.w * GetBoneMatrix(Input.BlendIndices.w);

#if GPUSKIN_USE_EXTRA_INFLUENCES
	BoneMatrix += Input.BlendWeightsExtra.x * GetBoneMatrix(Input.BlendIndicesExtra.x);
	BoneMatrix += Input.BlendWeightsExtra.y * GetBoneMatrix(Input.BlendIndicesExtra.y);
	BoneMatrix += Input.BlendWeightsExtra.z * GetBoneMatrix(Input.BlendIndicesExtra.z);
	BoneMatrix += Input.BlendWeightsExtra.w * GetBoneMatrix(Input.BlendIndicesExtra.w);
#endif
#endif//GPUSKIN_LIMIT_2BONE_INFLUENCES
	return BoneMatrix;
}

FBoneMatrix GetPreviousBoneMatrix(int Index)
{
	float4 A = PreviousBoneMatrices[Index * 3 + 0];
	float4 B = PreviousBoneMatrices[Index * 3 + 1];
	float4 C = PreviousBoneMatrices[Index * 3 + 2];
	return FBoneMatrix(A, B, C);
}

FBoneMatrix CalcPreviousBoneMatrix(FVertexFactoryInput Input)
{
	FBoneMatrix BoneMatrix = Input.BlendWeights.x * GetPreviousBoneMatrix(Input.BlendIndices.x);
	BoneMatrix += Input.BlendWeights.y * GetPreviousBoneMatrix(Input.BlendIndices.y);

#if !GPUSKIN_LIMIT_2BONE_INFLUENCES
	BoneMatrix += Input.BlendWeights.z * GetPreviousBoneMatrix(Input.BlendIndices.z);
	BoneMatrix += Input.BlendWeights.w * GetPreviousBoneMatrix(Input.BlendIndices.w);

#if GPUSKIN_USE_EXTRA_INFLUENCES
	BoneMatrix += Input.BlendWeightsExtra.x * GetPreviousBoneMatrix(Input.BlendIndicesExtra.x);
	BoneMatrix += Input.BlendWeightsExtra.y * GetPreviousBoneMatrix(Input.BlendIndicesExtra.y);
	BoneMatrix += Input.BlendWeightsExtra.z * GetPreviousBoneMatrix(Input.BlendIndicesExtra.z);
	BoneMatrix += Input.BlendWeightsExtra.w * GetPreviousBoneMatrix(Input.BlendIndicesExtra.w);
#endif
#endif//GPUSKIN_LIMIT_2BONE_INFLUENCES
	return BoneMatrix;
}

/** transform position by weighted sum of skinning matrices */
float3 SkinPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
#if GPUSKIN_MORPH_BLEND
	//float4 Position = float4(MorphPosition(Input, Intermediates), 1);
#else
	float4 Position = float4(Intermediates.UnpackedPosition, 1);
#endif

	// Note the use of mul(Matrix,Vector), bone matrices are stored transposed
	// for tighter packing.
	return mul(Intermediates.BlendMatrix, Position);
}

/** transform position by weighted sum of skinning matrices */
float3 SkinPreviousPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
#if GPUSKIN_MORPH_BLEND
	//float4 Position = float4(MorphPosition(Input, Intermediates), 1);
#else
	float4 Position = float4(Intermediates.UnpackedPosition, 1);
#endif

	FBoneMatrix BlendMatrix = Intermediates.BlendMatrix;

	// Previous Blend Matrix (used for position in velocity rendering)

	if (PerBoneMotionBlur)
	{
		BlendMatrix = CalcPreviousBoneMatrix(Input);
	}

	// Note the use of mul(Matrix,Vector), bone matrices are stored transposed
	// for tighter packing.
	return mul(BlendMatrix, Position);
}

/** transform the tangent basis vectors */
float3x3 SkinTangents(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3x3 TangentToLocal;

	// tangent
	// -1..1
	half3 LocalTangentX = Input.TangentX;
	// -1..1 .xyz:normal, .w:contains sign of tangent basis determinant (left or right handed)
	half4 LocalTangentZ = Input.TangentZ;

	// Note the use of mul(Matrix,Vector), bone matrices are stored transposed
	// for tighter packing.
	TangentToLocal[0] = mul(Intermediates.BlendMatrix, float4(LocalTangentX, 0));
	TangentToLocal[2] = mul(Intermediates.BlendMatrix, float4(LocalTangentZ.xyz, 0));

	// derive the new binormal by getting the cross product of the normal and tangent
	// and flip vector based on sign of tangent basis determinant
	TangentToLocal[1] = cross(TangentToLocal[2], TangentToLocal[0]) * LocalTangentZ.w;

#if GPUSKIN_APEX_CLOTH
	//return ClothTangent * TempClothBlendWeight + TangentToLocal * (1.0f - TempClothBlendWeight);
#else
	return TangentToLocal;
#endif	// GPUSKIN_APEX_CLOTH
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;

	Intermediates.UnpackedPosition = UnpackedPosition(Input);
#if GPUSKIN_APEX_CLOTH
// 	SetupClothVertex(Input.ClothVertexID);
// 	if (IsSimulatedVertex(ClothVertex))
// 	{
// 		Intermediates.PreviousSimulatedPosition = ClothingPosition(ClothVertex, true);
// 		Intermediates.SimulatedPosition = ClothingPosition(ClothVertex, false);
// 	}
// 	else
// 	{
// 		Intermediates.PreviousSimulatedPosition = Intermediates.SimulatedPosition = Intermediates.UnpackedPosition;
// 	}

#endif

	Intermediates.BlendMatrix = CalcBoneMatrix(Input);

	// Fill TangentToLocal
	Intermediates.TangentToLocal = SkinTangents(Input, Intermediates);

	// Swizzle vertex color.
	Intermediates.Color = Input.Color FCOLOR_COMPONENT_SWIZZLE;

	return Intermediates;
}

float4 CalcWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
#if GPUSKIN_APEX_CLOTH
// 	if (IsSimulatedVertex(ClothVertex))
// 	{
// 		// skinned positions
// 		float4 SkinnedPosition = float4(SkinPosition(Input, Intermediates), 1);
// 		float4 TransformedSkinPos = mul(SkinnedPosition, Primitive.LocalToWorld);
// 
// 		// Intermediates.SimulatedPosition is a clothing position in world coord
// 		float3 BlendedPos = lerp(TransformedSkinPos.xyz, Intermediates.SimulatedPosition, ClothBlendWeight);
// 		return float4(BlendedPos + ResolvedView.PreViewTranslation, 1);
// 	}
// 	else
#endif
	{
		return TransformLocalToTranslatedWorld(SkinPosition(Input, Intermediates));
	}
}


/**
* Get the 3x3 tangent basis vectors for this vertex factory
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToLocal;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input, Intermediates);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float3x3 LocalToWorld = GetLocalToWorld3x3();

	// Remove scaling.
	half3 InvScale = Primitive.InvNonUniformScale.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;

	float3x3 TangentToWorld = mul(Intermediates.TangentToLocal, LocalToWorld);

	TangentToWorld0 = TangentToWorld[0];
	TangentToWorld2 = float4(TangentToWorld[2], Input.TangentZ.w * Primitive.LocalToWorldDeterminantSign);
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

#if NUM_TEX_COORD_INTERPOLATORS
	float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	[UNROLL]
		for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
		{
			Interpolants.TexCoords[CoordinateIndex] = CustomizedUVs[CoordinateIndex];
		}
#endif

	Interpolants.TangentToWorld0.w = 0;
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Interpolants.TangentToWorld2_Center = Interpolants.TangentToWorld2;
#endif

	Interpolants.Color = Intermediates.Color;

#if INSTANCED_STEREO
	Interpolants.PackedEyeIndex = 0;
#endif

	return Interpolants;
}

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;

	float4 PrevSkinPosInWorld = mul(float4(SkinPreviousPosition(Input, Intermediates), 1), PreviousLocalToWorldTranslated);
#if GPUSKIN_APEX_CLOTH
// 	if (IsSimulatedVertex(ClothVertex))
// 	{
// 		float3 PrevSimulatedPos = Intermediates.PreviousSimulatedPosition + ResolvedView.PrevPreViewTranslation;
// 		float3 BlendedPrevPos = lerp(PrevSkinPosInWorld.xyz, PrevSimulatedPos.xyz, ClothBlendWeight);
// 		return float4(BlendedPrevPos, 1);
// 	}
#endif // GPUSKIN_APEX_CLOTH

	return PrevSkinPosInWorld;
}

#if USING_TESSELLATION
float2 VertexFactoryGetTextureCoordinateDS(FVertexFactoryInterpolantsVSToDS Interpolants)
{
#if NUM_MATERIAL_TEXCOORDS
	return Interpolants.InterpolantsVSToPS.TexCoords[0].xy;
#else // #if NUM_MATERIAL_TEXCOORDS
	return float2(0, 0);
#endif // #if NUM_MATERIAL_TEXCOORDS
}

FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
{
	return Input.InterpolantsVSToPS;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToDS Interpolants;

	Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);

	return Interpolants;
}

/** Converts from vertex factory specific interpolants to a FMaterialTessellationParameters, which is used by material inputs. */
FMaterialTessellationParameters GetMaterialTessellationParameters(FVertexFactoryInterpolantsVSToDS Interpolants, float3 CameraLocalWorldPosition)
{
	FMaterialTessellationParameters	Result;
#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
		for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex];
		}
#endif

	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;

	Result.VertexColor = Interpolants.InterpolantsVSToPS.Color;

	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);

	Result.TangentToWorldPreScale = 1;


	Result.WorldPosition = CameraLocalWorldPosition + ResolvedView.WorldCameraOrigin;

	return Result;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryInterpolate(FVertexFactoryInterpolantsVSToDS a, float aInterp, FVertexFactoryInterpolantsVSToDS b, float bInterp)
{
	FVertexFactoryInterpolantsVSToDS O;

	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld0.xyz);
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld2);
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.Color);

#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
		for (int tc = 0; tc < NUM_TEX_COORD_INTERPOLATORS; ++tc)
		{
			TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TexCoords[tc]);
		}
#endif

	return O;
}

float3x3 VertexFactoryGetTangentToLocalDS(FVertexFactoryInterpolantsVSToDS Interpolants)
{
	// This duplicates stuff already going on in GetMaterialTessellationParameters(), so
	// maybe the hull shader could leverage that instead?

	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;

	float3x3 TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);

	return TangentToWorld;
}

#endif // #if USING_TESSELLATION

#if INSTANCED_STEREO
uint VertexFactoryGetEyeIndex(uint InstanceId)
{
	return InstanceId & 1;
}
#endif

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}
