struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 WorldToClip;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToWorld;
	float4x4 ScreenToTranslatedWorld;
	half3 ViewForward;
	half3 ViewUp;
	half3 ViewRight;
	half3 HMDViewNoRollUp;
	half3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	half4 ScreenPositionScaleBias;
	float3 WorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOrigin;
	float3 PreViewTranslation;
	float4x4 PrevProjection;
	float4x4 PrevViewProj;
	float4x4 PrevViewRotationProj;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevWorldCameraOrigin;
	float3 PrevWorldViewOrigin;
	float3 PrevPreViewTranslation;
	float4x4 PrevInvViewProj;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	half4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	int NumSceneColorMSAASamples;
	half PreExposure;
	half OneOverPreExposure;
	half4 DiffuseOverrideParameter;
	half4 SpecularOverrideParameter;
	half4 NormalOverrideParameter;
	half2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	half OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	half NearPlane;
	float AdaptiveTessellationFactor;
	float GameTime;
	float RealTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	half CameraCut;
	half UnlitViewmodeMask;
	half4 DirectionalLightColor;
	half3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float bSubsurfacePostprocessEnabled;
	float GeneralPurposeTweak;
	half DemosaicVposOffset;
	float3 IndirectLightingColorScale;
	half HDR32bppEncodingMode;
	float3 AtmosphericFogSunDirection;
	half AtmosphericFogSunPower;
	half AtmosphericFogPower;
	half AtmosphericFogDensityScale;
	half AtmosphericFogDensityOffset;
	half AtmosphericFogGroundOffset;
	half AtmosphericFogDistanceScale;
	half AtmosphericFogAltitudeScale;
	half AtmosphericFogHeightScaleRayleigh;
	half AtmosphericFogStartDistance;
	half AtmosphericFogDistanceOffset;
	half AtmosphericFogSunDiscScale;
	uint AtmosphericFogRenderMask;
	uint AtmosphericFogInscatterAltitudeSampleNum;
	float4 AtmosphericFogSunColor;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightParameters;
	float4 SkyLightColor;
	float4 SkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	half ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[4];
	float4 GlobalVolumeWorldToUVAddAndMul[4];
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDistance;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
};
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.WorldToClip = View.WorldToClip;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToWorld = View.ScreenToWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.WorldCameraOrigin = View.WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = View.WorldViewOrigin;
	Result.PreViewTranslation = View.PreViewTranslation;
	Result.PrevProjection = View.PrevProjection;
	Result.PrevViewProj = View.PrevViewProj;
	Result.PrevViewRotationProj = View.PrevViewRotationProj;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = View.PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = View.PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = View.PrevPreViewTranslation;
	Result.PrevInvViewProj = View.PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.AdaptiveTessellationFactor = View.AdaptiveTessellationFactor;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.HDR32bppEncodingMode = View.HDR32bppEncodingMode;
	Result.AtmosphericFogSunDirection = View.AtmosphericFogSunDirection;
	Result.AtmosphericFogSunPower = View.AtmosphericFogSunPower;
	Result.AtmosphericFogPower = View.AtmosphericFogPower;
	Result.AtmosphericFogDensityScale = View.AtmosphericFogDensityScale;
	Result.AtmosphericFogDensityOffset = View.AtmosphericFogDensityOffset;
	Result.AtmosphericFogGroundOffset = View.AtmosphericFogGroundOffset;
	Result.AtmosphericFogDistanceScale = View.AtmosphericFogDistanceScale;
	Result.AtmosphericFogAltitudeScale = View.AtmosphericFogAltitudeScale;
	Result.AtmosphericFogHeightScaleRayleigh = View.AtmosphericFogHeightScaleRayleigh;
	Result.AtmosphericFogStartDistance = View.AtmosphericFogStartDistance;
	Result.AtmosphericFogDistanceOffset = View.AtmosphericFogDistanceOffset;
	Result.AtmosphericFogSunDiscScale = View.AtmosphericFogSunDiscScale;
	Result.AtmosphericFogRenderMask = View.AtmosphericFogRenderMask;
	Result.AtmosphericFogInscatterAltitudeSampleNum = View.AtmosphericFogInscatterAltitudeSampleNum;
	Result.AtmosphericFogSunColor = View.AtmosphericFogSunColor;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightParameters = View.SkyLightParameters;
	Result.SkyLightColor = View.SkyLightColor;
	Result.SkyIrradianceEnvironmentMap = View.SkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = View.GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = View.GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDistance = View.MaxGlobalDistance;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = View.StereoIPD;
	return Result;
}
ViewState GetInstancedView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = InstancedView.TranslatedWorldToClip;
	Result.WorldToClip = InstancedView.WorldToClip;
	Result.TranslatedWorldToView = InstancedView.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = InstancedView.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = InstancedView.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = InstancedView.CameraViewToTranslatedWorld;
	Result.ViewToClip = InstancedView.ViewToClip;
	Result.ViewToClipNoAA = InstancedView.ViewToClipNoAA;
	Result.ClipToView = InstancedView.ClipToView;
	Result.ClipToTranslatedWorld = InstancedView.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = InstancedView.SVPositionToTranslatedWorld;
	Result.ScreenToWorld = InstancedView.ScreenToWorld;
	Result.ScreenToTranslatedWorld = InstancedView.ScreenToTranslatedWorld;
	Result.ViewForward = InstancedView.ViewForward;
	Result.ViewUp = InstancedView.ViewUp;
	Result.ViewRight = InstancedView.ViewRight;
	Result.HMDViewNoRollUp = InstancedView.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = InstancedView.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = InstancedView.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = InstancedView.ScreenPositionScaleBias;
	Result.WorldCameraOrigin = InstancedView.WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = InstancedView.TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = InstancedView.WorldViewOrigin;
	Result.PreViewTranslation = InstancedView.PreViewTranslation;
	Result.PrevProjection = InstancedView.PrevProjection;
	Result.PrevViewProj = InstancedView.PrevViewProj;
	Result.PrevViewRotationProj = InstancedView.PrevViewRotationProj;
	Result.PrevViewToClip = InstancedView.PrevViewToClip;
	Result.PrevClipToView = InstancedView.PrevClipToView;
	Result.PrevTranslatedWorldToClip = InstancedView.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = InstancedView.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = InstancedView.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = InstancedView.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = InstancedView.PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = InstancedView.PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = InstancedView.PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = InstancedView.PrevPreViewTranslation;
	Result.PrevInvViewProj = InstancedView.PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = InstancedView.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = InstancedView.ClipToPrevClip;
	Result.TemporalAAJitter = InstancedView.TemporalAAJitter;
	Result.GlobalClippingPlane = InstancedView.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = InstancedView.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = InstancedView.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = InstancedView.ViewRectMin;
	Result.ViewSizeAndInvSize = InstancedView.ViewSizeAndInvSize;
	Result.BufferSizeAndInvSize = InstancedView.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = InstancedView.BufferBilinearUVMinMax;
	Result.NumSceneColorMSAASamples = InstancedView.NumSceneColorMSAASamples;
	Result.PreExposure = InstancedView.PreExposure;
	Result.OneOverPreExposure = InstancedView.OneOverPreExposure;
	Result.DiffuseOverrideParameter = InstancedView.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = InstancedView.SpecularOverrideParameter;
	Result.NormalOverrideParameter = InstancedView.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = InstancedView.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = InstancedView.PrevFrameGameTime;
	Result.PrevFrameRealTime = InstancedView.PrevFrameRealTime;
	Result.OutOfBoundsMask = InstancedView.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = InstancedView.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = InstancedView.CullingSign;
	Result.NearPlane = InstancedView.NearPlane;
	Result.AdaptiveTessellationFactor = InstancedView.AdaptiveTessellationFactor;
	Result.GameTime = InstancedView.GameTime;
	Result.RealTime = InstancedView.RealTime;
	Result.MaterialTextureMipBias = InstancedView.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = InstancedView.MaterialTextureDerivativeMultiply;
	Result.Random = InstancedView.Random;
	Result.FrameNumber = InstancedView.FrameNumber;
	Result.StateFrameIndexMod8 = InstancedView.StateFrameIndexMod8;
	Result.CameraCut = InstancedView.CameraCut;
	Result.UnlitViewmodeMask = InstancedView.UnlitViewmodeMask;
	Result.DirectionalLightColor = InstancedView.DirectionalLightColor;
	Result.DirectionalLightDirection = InstancedView.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = InstancedView.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = InstancedView.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = InstancedView.TemporalAAParams;
	Result.CircleDOFParams = InstancedView.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = InstancedView.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = InstancedView.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = InstancedView.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = InstancedView.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = InstancedView.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = InstancedView.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = InstancedView.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = InstancedView.MotionBlurNormalizedToPixel;
	Result.bSubsurfacePostprocessEnabled = InstancedView.bSubsurfacePostprocessEnabled;
	Result.GeneralPurposeTweak = InstancedView.GeneralPurposeTweak;
	Result.DemosaicVposOffset = InstancedView.DemosaicVposOffset;
	Result.IndirectLightingColorScale = InstancedView.IndirectLightingColorScale;
	Result.HDR32bppEncodingMode = InstancedView.HDR32bppEncodingMode;
	Result.AtmosphericFogSunDirection = InstancedView.AtmosphericFogSunDirection;
	Result.AtmosphericFogSunPower = InstancedView.AtmosphericFogSunPower;
	Result.AtmosphericFogPower = InstancedView.AtmosphericFogPower;
	Result.AtmosphericFogDensityScale = InstancedView.AtmosphericFogDensityScale;
	Result.AtmosphericFogDensityOffset = InstancedView.AtmosphericFogDensityOffset;
	Result.AtmosphericFogGroundOffset = InstancedView.AtmosphericFogGroundOffset;
	Result.AtmosphericFogDistanceScale = InstancedView.AtmosphericFogDistanceScale;
	Result.AtmosphericFogAltitudeScale = InstancedView.AtmosphericFogAltitudeScale;
	Result.AtmosphericFogHeightScaleRayleigh = InstancedView.AtmosphericFogHeightScaleRayleigh;
	Result.AtmosphericFogStartDistance = InstancedView.AtmosphericFogStartDistance;
	Result.AtmosphericFogDistanceOffset = InstancedView.AtmosphericFogDistanceOffset;
	Result.AtmosphericFogSunDiscScale = InstancedView.AtmosphericFogSunDiscScale;
	Result.AtmosphericFogRenderMask = InstancedView.AtmosphericFogRenderMask;
	Result.AtmosphericFogInscatterAltitudeSampleNum = InstancedView.AtmosphericFogInscatterAltitudeSampleNum;
	Result.AtmosphericFogSunColor = InstancedView.AtmosphericFogSunColor;
	Result.NormalCurvatureToRoughnessScaleBias = InstancedView.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = InstancedView.RenderingReflectionCaptureMask;
	Result.AmbientCubemapTint = InstancedView.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = InstancedView.AmbientCubemapIntensity;
	Result.SkyLightParameters = InstancedView.SkyLightParameters;
	Result.SkyLightColor = InstancedView.SkyLightColor;
	Result.SkyIrradianceEnvironmentMap = InstancedView.SkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = InstancedView.MobilePreviewMode;
	Result.HMDEyePaddingOffset = InstancedView.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = InstancedView.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = InstancedView.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = InstancedView.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = InstancedView.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = InstancedView.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = InstancedView.StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = InstancedView.GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = InstancedView.GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalVolumeDimension = InstancedView.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = InstancedView.GlobalVolumeTexelSize;
	Result.MaxGlobalDistance = InstancedView.MaxGlobalDistance;
	Result.bCheckerboardSubsurfaceProfileRendering = InstancedView.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = InstancedView.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = InstancedView.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = InstancedView.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = InstancedView.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = InstancedView.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = InstancedView.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = InstancedView.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = InstancedView.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = InstancedView.VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = InstancedView.StereoIPD;
	return Result;
}
#if COMPILER_METAL
ViewState ResolveView(uint ViewIndex)
{
	ViewState Result;
	Result.TranslatedWorldToClip = (ViewIndex == 0) ? View.TranslatedWorldToClip : InstancedView.TranslatedWorldToClip;
	Result.WorldToClip = (ViewIndex == 0) ? View.WorldToClip : InstancedView.WorldToClip;
	Result.TranslatedWorldToView = (ViewIndex == 0) ? View.TranslatedWorldToView : InstancedView.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = (ViewIndex == 0) ? View.ViewToTranslatedWorld : InstancedView.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = (ViewIndex == 0) ? View.TranslatedWorldToCameraView : InstancedView.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = (ViewIndex == 0) ? View.CameraViewToTranslatedWorld : InstancedView.CameraViewToTranslatedWorld;
	Result.ViewToClip = (ViewIndex == 0) ? View.ViewToClip : InstancedView.ViewToClip;
	Result.ViewToClipNoAA = (ViewIndex == 0) ? View.ViewToClipNoAA : InstancedView.ViewToClipNoAA;
	Result.ClipToView = (ViewIndex == 0) ? View.ClipToView : InstancedView.ClipToView;
	Result.ClipToTranslatedWorld = (ViewIndex == 0) ? View.ClipToTranslatedWorld : InstancedView.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = (ViewIndex == 0) ? View.SVPositionToTranslatedWorld : InstancedView.SVPositionToTranslatedWorld;
	Result.ScreenToWorld = (ViewIndex == 0) ? View.ScreenToWorld : InstancedView.ScreenToWorld;
	Result.ScreenToTranslatedWorld = (ViewIndex == 0) ? View.ScreenToTranslatedWorld : InstancedView.ScreenToTranslatedWorld;
	Result.ViewForward = (ViewIndex == 0) ? View.ViewForward : InstancedView.ViewForward;
	Result.ViewUp = (ViewIndex == 0) ? View.ViewUp : InstancedView.ViewUp;
	Result.ViewRight = (ViewIndex == 0) ? View.ViewRight : InstancedView.ViewRight;
	Result.HMDViewNoRollUp = (ViewIndex == 0) ? View.HMDViewNoRollUp : InstancedView.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = (ViewIndex == 0) ? View.HMDViewNoRollRight : InstancedView.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = (ViewIndex == 0) ? View.InvDeviceZToWorldZTransform : InstancedView.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = (ViewIndex == 0) ? View.ScreenPositionScaleBias : InstancedView.ScreenPositionScaleBias;
	Result.WorldCameraOrigin = (ViewIndex == 0) ? View.WorldCameraOrigin : InstancedView.WorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = (ViewIndex == 0) ? View.TranslatedWorldCameraOrigin : InstancedView.TranslatedWorldCameraOrigin;
	Result.WorldViewOrigin = (ViewIndex == 0) ? View.WorldViewOrigin : InstancedView.WorldViewOrigin;
	Result.PreViewTranslation = (ViewIndex == 0) ? View.PreViewTranslation : InstancedView.PreViewTranslation;
	Result.PrevProjection = (ViewIndex == 0) ? View.PrevProjection : InstancedView.PrevProjection;
	Result.PrevViewProj = (ViewIndex == 0) ? View.PrevViewProj : InstancedView.PrevViewProj;
	Result.PrevViewRotationProj = (ViewIndex == 0) ? View.PrevViewRotationProj : InstancedView.PrevViewRotationProj;
	Result.PrevViewToClip = (ViewIndex == 0) ? View.PrevViewToClip : InstancedView.PrevViewToClip;
	Result.PrevClipToView = (ViewIndex == 0) ? View.PrevClipToView : InstancedView.PrevClipToView;
	Result.PrevTranslatedWorldToClip = (ViewIndex == 0) ? View.PrevTranslatedWorldToClip : InstancedView.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = (ViewIndex == 0) ? View.PrevTranslatedWorldToView : InstancedView.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = (ViewIndex == 0) ? View.PrevViewToTranslatedWorld : InstancedView.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = (ViewIndex == 0) ? View.PrevTranslatedWorldToCameraView : InstancedView.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = (ViewIndex == 0) ? View.PrevCameraViewToTranslatedWorld : InstancedView.PrevCameraViewToTranslatedWorld;
	Result.PrevWorldCameraOrigin = (ViewIndex == 0) ? View.PrevWorldCameraOrigin : InstancedView.PrevWorldCameraOrigin;
	Result.PrevWorldViewOrigin = (ViewIndex == 0) ? View.PrevWorldViewOrigin : InstancedView.PrevWorldViewOrigin;
	Result.PrevPreViewTranslation = (ViewIndex == 0) ? View.PrevPreViewTranslation : InstancedView.PrevPreViewTranslation;
	Result.PrevInvViewProj = (ViewIndex == 0) ? View.PrevInvViewProj : InstancedView.PrevInvViewProj;
	Result.PrevScreenToTranslatedWorld = (ViewIndex == 0) ? View.PrevScreenToTranslatedWorld : InstancedView.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = (ViewIndex == 0) ? View.ClipToPrevClip : InstancedView.ClipToPrevClip;
	Result.TemporalAAJitter = (ViewIndex == 0) ? View.TemporalAAJitter : InstancedView.TemporalAAJitter;
	Result.GlobalClippingPlane = (ViewIndex == 0) ? View.GlobalClippingPlane : InstancedView.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = (ViewIndex == 0) ? View.FieldOfViewWideAngles : InstancedView.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = (ViewIndex == 0) ? View.PrevFieldOfViewWideAngles : InstancedView.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = (ViewIndex == 0) ? View.ViewRectMin : InstancedView.ViewRectMin;
	Result.ViewSizeAndInvSize = (ViewIndex == 0) ? View.ViewSizeAndInvSize : InstancedView.ViewSizeAndInvSize;
	Result.BufferSizeAndInvSize = (ViewIndex == 0) ? View.BufferSizeAndInvSize : InstancedView.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = (ViewIndex == 0) ? View.BufferBilinearUVMinMax : InstancedView.BufferBilinearUVMinMax;
	Result.NumSceneColorMSAASamples = (ViewIndex == 0) ? View.NumSceneColorMSAASamples : InstancedView.NumSceneColorMSAASamples;
	Result.PreExposure = (ViewIndex == 0) ? View.PreExposure : InstancedView.PreExposure;
	Result.OneOverPreExposure = (ViewIndex == 0) ? View.OneOverPreExposure : InstancedView.OneOverPreExposure;
	Result.DiffuseOverrideParameter = (ViewIndex == 0) ? View.DiffuseOverrideParameter : InstancedView.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = (ViewIndex == 0) ? View.SpecularOverrideParameter : InstancedView.SpecularOverrideParameter;
	Result.NormalOverrideParameter = (ViewIndex == 0) ? View.NormalOverrideParameter : InstancedView.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = (ViewIndex == 0) ? View.RoughnessOverrideParameter : InstancedView.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = (ViewIndex == 0) ? View.PrevFrameGameTime : InstancedView.PrevFrameGameTime;
	Result.PrevFrameRealTime = (ViewIndex == 0) ? View.PrevFrameRealTime : InstancedView.PrevFrameRealTime;
	Result.OutOfBoundsMask = (ViewIndex == 0) ? View.OutOfBoundsMask : InstancedView.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = (ViewIndex == 0) ? View.WorldCameraMovementSinceLastFrame : InstancedView.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = (ViewIndex == 0) ? View.CullingSign : InstancedView.CullingSign;
	Result.NearPlane = (ViewIndex == 0) ? View.NearPlane : InstancedView.NearPlane;
	Result.AdaptiveTessellationFactor = (ViewIndex == 0) ? View.AdaptiveTessellationFactor : InstancedView.AdaptiveTessellationFactor;
	Result.GameTime = (ViewIndex == 0) ? View.GameTime : InstancedView.GameTime;
	Result.RealTime = (ViewIndex == 0) ? View.RealTime : InstancedView.RealTime;
	Result.MaterialTextureMipBias = (ViewIndex == 0) ? View.MaterialTextureMipBias : InstancedView.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = (ViewIndex == 0) ? View.MaterialTextureDerivativeMultiply : InstancedView.MaterialTextureDerivativeMultiply;
	Result.Random = (ViewIndex == 0) ? View.Random : InstancedView.Random;
	Result.FrameNumber = (ViewIndex == 0) ? View.FrameNumber : InstancedView.FrameNumber;
	Result.StateFrameIndexMod8 = (ViewIndex == 0) ? View.StateFrameIndexMod8 : InstancedView.StateFrameIndexMod8;
	Result.CameraCut = (ViewIndex == 0) ? View.CameraCut : InstancedView.CameraCut;
	Result.UnlitViewmodeMask = (ViewIndex == 0) ? View.UnlitViewmodeMask : InstancedView.UnlitViewmodeMask;
	Result.DirectionalLightColor = (ViewIndex == 0) ? View.DirectionalLightColor : InstancedView.DirectionalLightColor;
	Result.DirectionalLightDirection = (ViewIndex == 0) ? View.DirectionalLightDirection : InstancedView.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = (ViewIndex == 0) ? View.TranslucencyLightingVolumeMin : InstancedView.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = (ViewIndex == 0) ? View.TranslucencyLightingVolumeInvSize : InstancedView.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = (ViewIndex == 0) ? View.TemporalAAParams : InstancedView.TemporalAAParams;
	Result.CircleDOFParams = (ViewIndex == 0) ? View.CircleDOFParams : InstancedView.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = (ViewIndex == 0) ? View.DepthOfFieldSensorWidth : InstancedView.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = (ViewIndex == 0) ? View.DepthOfFieldFocalDistance : InstancedView.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = (ViewIndex == 0) ? View.DepthOfFieldScale : InstancedView.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = (ViewIndex == 0) ? View.DepthOfFieldFocalLength : InstancedView.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = (ViewIndex == 0) ? View.DepthOfFieldFocalRegion : InstancedView.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = (ViewIndex == 0) ? View.DepthOfFieldNearTransitionRegion : InstancedView.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = (ViewIndex == 0) ? View.DepthOfFieldFarTransitionRegion : InstancedView.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = (ViewIndex == 0) ? View.MotionBlurNormalizedToPixel : InstancedView.MotionBlurNormalizedToPixel;
	Result.bSubsurfacePostprocessEnabled = (ViewIndex == 0) ? View.bSubsurfacePostprocessEnabled : InstancedView.bSubsurfacePostprocessEnabled;
	Result.GeneralPurposeTweak = (ViewIndex == 0) ? View.GeneralPurposeTweak : InstancedView.GeneralPurposeTweak;
	Result.DemosaicVposOffset = (ViewIndex == 0) ? View.DemosaicVposOffset : InstancedView.DemosaicVposOffset;
	Result.IndirectLightingColorScale = (ViewIndex == 0) ? View.IndirectLightingColorScale : InstancedView.IndirectLightingColorScale;
	Result.HDR32bppEncodingMode = (ViewIndex == 0) ? View.HDR32bppEncodingMode : InstancedView.HDR32bppEncodingMode;
	Result.AtmosphericFogSunDirection = (ViewIndex == 0) ? View.AtmosphericFogSunDirection : InstancedView.AtmosphericFogSunDirection;
	Result.AtmosphericFogSunPower = (ViewIndex == 0) ? View.AtmosphericFogSunPower : InstancedView.AtmosphericFogSunPower;
	Result.AtmosphericFogPower = (ViewIndex == 0) ? View.AtmosphericFogPower : InstancedView.AtmosphericFogPower;
	Result.AtmosphericFogDensityScale = (ViewIndex == 0) ? View.AtmosphericFogDensityScale : InstancedView.AtmosphericFogDensityScale;
	Result.AtmosphericFogDensityOffset = (ViewIndex == 0) ? View.AtmosphericFogDensityOffset : InstancedView.AtmosphericFogDensityOffset;
	Result.AtmosphericFogGroundOffset = (ViewIndex == 0) ? View.AtmosphericFogGroundOffset : InstancedView.AtmosphericFogGroundOffset;
	Result.AtmosphericFogDistanceScale = (ViewIndex == 0) ? View.AtmosphericFogDistanceScale : InstancedView.AtmosphericFogDistanceScale;
	Result.AtmosphericFogAltitudeScale = (ViewIndex == 0) ? View.AtmosphericFogAltitudeScale : InstancedView.AtmosphericFogAltitudeScale;
	Result.AtmosphericFogHeightScaleRayleigh = (ViewIndex == 0) ? View.AtmosphericFogHeightScaleRayleigh : InstancedView.AtmosphericFogHeightScaleRayleigh;
	Result.AtmosphericFogStartDistance = (ViewIndex == 0) ? View.AtmosphericFogStartDistance : InstancedView.AtmosphericFogStartDistance;
	Result.AtmosphericFogDistanceOffset = (ViewIndex == 0) ? View.AtmosphericFogDistanceOffset : InstancedView.AtmosphericFogDistanceOffset;
	Result.AtmosphericFogSunDiscScale = (ViewIndex == 0) ? View.AtmosphericFogSunDiscScale : InstancedView.AtmosphericFogSunDiscScale;
	Result.AtmosphericFogRenderMask = (ViewIndex == 0) ? View.AtmosphericFogRenderMask : InstancedView.AtmosphericFogRenderMask;
	Result.AtmosphericFogInscatterAltitudeSampleNum = (ViewIndex == 0) ? View.AtmosphericFogInscatterAltitudeSampleNum : InstancedView.AtmosphericFogInscatterAltitudeSampleNum;
	Result.AtmosphericFogSunColor = (ViewIndex == 0) ? View.AtmosphericFogSunColor : InstancedView.AtmosphericFogSunColor;
	Result.NormalCurvatureToRoughnessScaleBias = (ViewIndex == 0) ? View.NormalCurvatureToRoughnessScaleBias : InstancedView.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = (ViewIndex == 0) ? View.RenderingReflectionCaptureMask : InstancedView.RenderingReflectionCaptureMask;
	Result.AmbientCubemapTint = (ViewIndex == 0) ? View.AmbientCubemapTint : InstancedView.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = (ViewIndex == 0) ? View.AmbientCubemapIntensity : InstancedView.AmbientCubemapIntensity;
	Result.SkyLightParameters = (ViewIndex == 0) ? View.SkyLightParameters : InstancedView.SkyLightParameters;
	Result.SkyLightColor = (ViewIndex == 0) ? View.SkyLightColor : InstancedView.SkyLightColor;
	Result.SkyIrradianceEnvironmentMap = (ViewIndex == 0) ? View.SkyIrradianceEnvironmentMap : InstancedView.SkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = (ViewIndex == 0) ? View.MobilePreviewMode : InstancedView.MobilePreviewMode;
	Result.HMDEyePaddingOffset = (ViewIndex == 0) ? View.HMDEyePaddingOffset : InstancedView.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = (ViewIndex == 0) ? View.ReflectionCubemapMaxMip : InstancedView.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = (ViewIndex == 0) ? View.ShowDecalsMask : InstancedView.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = (ViewIndex == 0) ? View.DistanceFieldAOSpecularOcclusionMode : InstancedView.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = (ViewIndex == 0) ? View.IndirectCapsuleSelfShadowingIntensity : InstancedView.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = (ViewIndex == 0) ? View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight : InstancedView.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = (ViewIndex == 0) ? View.StereoPassIndex : InstancedView.StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = (ViewIndex == 0) ? View.GlobalVolumeCenterAndExtent : InstancedView.GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = (ViewIndex == 0) ? View.GlobalVolumeWorldToUVAddAndMul : InstancedView.GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalVolumeDimension = (ViewIndex == 0) ? View.GlobalVolumeDimension : InstancedView.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = (ViewIndex == 0) ? View.GlobalVolumeTexelSize : InstancedView.GlobalVolumeTexelSize;
	Result.MaxGlobalDistance = (ViewIndex == 0) ? View.MaxGlobalDistance : InstancedView.MaxGlobalDistance;
	Result.bCheckerboardSubsurfaceProfileRendering = (ViewIndex == 0) ? View.bCheckerboardSubsurfaceProfileRendering : InstancedView.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = (ViewIndex == 0) ? View.VolumetricFogInvGridSize : InstancedView.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = (ViewIndex == 0) ? View.VolumetricFogGridZParams : InstancedView.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = (ViewIndex == 0) ? View.VolumetricFogSVPosToVolumeUV : InstancedView.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = (ViewIndex == 0) ? View.VolumetricFogMaxDistance : InstancedView.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = (ViewIndex == 0) ? View.VolumetricLightmapWorldToUVScale : InstancedView.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = (ViewIndex == 0) ? View.VolumetricLightmapWorldToUVAdd : InstancedView.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = (ViewIndex == 0) ? View.VolumetricLightmapIndirectionTextureSize : InstancedView.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = (ViewIndex == 0) ? View.VolumetricLightmapBrickSize : InstancedView.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = (ViewIndex == 0) ? View.VolumetricLightmapBrickTexelSize : InstancedView.VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = (ViewIndex == 0) ? View.StereoIPD : InstancedView.StereoIPD;
	return Result;
}
#endif
