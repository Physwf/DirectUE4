#ifndef __POST_PROCESS_COMMON__
#define __POST_PROCESS_COMMON__

#include "SceneTexturesCommon.dusf"

/// e.g.
//   PostprocessInput0.SampleLevel(PostprocessInput0Sampler, float2 UV, 0)
//   Texture2DSample(PostprocessInput0, PostprocessInput0Sampler, float2 UV)
//   PostprocessInput0.Load(Texel.xyz)
//   PostprocessInput0.GetDimensions(uint, out uint width, out uint height, out uint levels)
//   PostprocessInput0.GetDimensions(uint, out float width, out float height, out float levels)
//   PostprocessInput0.GetDimensions(out uint width, out uint height)
//   PostprocessInput0.GetDimensions(out float width, out float height)
Texture2D PostprocessInput0;
SamplerState PostprocessInput0Sampler;
Texture2D PostprocessInput1;
SamplerState PostprocessInput1Sampler;
Texture2D PostprocessInput2;
SamplerState PostprocessInput2Sampler;
Texture2D PostprocessInput3;
SamplerState PostprocessInput3Sampler;
Texture2D PostprocessInput4;
SamplerState PostprocessInput4Sampler;
Texture2D PostprocessInput5;
SamplerState PostprocessInput5Sampler;
Texture2D PostprocessInput6;
SamplerState PostprocessInput6Sampler;
Texture2D PostprocessInput7;
SamplerState PostprocessInput7Sampler;
Texture2D PostprocessInput8;
SamplerState PostprocessInput8Sampler;
Texture2D PostprocessInput9;
SamplerState PostprocessInput9Sampler;
Texture2D PostprocessInput10;
SamplerState PostprocessInput10Sampler;

// width, height, 1/width, 1/height
float4 PostprocessInput0Size;
float4 PostprocessInput1Size;
float4 PostprocessInput2Size;
float4 PostprocessInput3Size;
float4 PostprocessInput4Size;
float4 PostprocessInput5Size;
float4 PostprocessInput6Size;
float4 PostprocessInput7Size;
float4 PostprocessInput8Size;
float4 PostprocessInput9Size;
float4 PostprocessInput10Size;

// xy = min valid BufferUV for a bilinear sampler in PostprocessInput%d, zw = max valid BufferUV for a bilinear sampler.
float4 PostprocessInput0MinMax;
float4 PostprocessInput1MinMax;
float4 PostprocessInput2MinMax;
float4 PostprocessInput3MinMax;
float4 PostprocessInput4MinMax;
float4 PostprocessInput5MinMax;
float4 PostprocessInput6MinMax;
float4 PostprocessInput7MinMax;
float4 PostprocessInput8MinMax;
float4 PostprocessInput9MinMax;
float4 PostprocessInput10MinMax;

// viewport width, height, 1/width, 1/height (scaled to the current rendertarget resolution), depends on SetViewportAndCallRHI() call
float4 ViewportSize;
// in pixels (scaled to the current rendertarget resolution), float4(minx,miny,maxx,maxy), depends on SetViewportAndCallRHI() call
uint4 ViewportRect;

float4 MappingPolynomial;			 // RGB = a, b, c where y = a * x*x + b * x + c

									 // @param InLDRColor needs to be LDR (0..1) and in linear space
half3 ColorCorrection(half3 InLDRColor)
{
	// final color correction to adjust for hardware differences, to make quick adjustements before a demo or simply a user setting
	return MappingPolynomial.x * (InLDRColor * InLDRColor) + MappingPolynomial.y * InLDRColor + MappingPolynomial.z;
}


half4 UnwrappedTexture3DSample(Texture2D Texture, SamplerState Sampler, float3 UVW, float Size)
{
	// a volume texture 16x16x16 would be unwrapped to a 2d texture 256x16

	float IntW = floor(UVW.z * Size - 0.5);
	half FracW = UVW.z * Size - 0.5 - IntW;

	float U = (UVW.x + IntW) / Size;
	float V = UVW.y;

	half4 RG0 = Texture2DSample(Texture, Sampler, float2(U, V));
	half4 RG1 = Texture2DSample(Texture, Sampler, float2(U + 1.0f / Size, V));

	return lerp(RG0, RG1, FracW);
}

// Scale {-1 to 1} of the viewport space to vignette circle space.
// Vignette space is scaled such that regardless of viewport aspect ratio, 
// corners are at the same brightness on a circle.
float2 VignetteSpace(float2 Pos)
{
	// could be optimized but this computation should be done in the vertex shader (3 or 4 vertices)
	float Scale = sqrt(2.0) / sqrt(1.0 + (ViewportSize.y * ViewportSize.z) * (ViewportSize.y * ViewportSize.z));
	return Pos * float2(1.0, ViewportSize.y * ViewportSize.z) * Scale;
}


#endif // __POST_PROCESS_COMMON__